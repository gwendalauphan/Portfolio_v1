variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""
  PORTFOLIO_V1_GROUP_REGISTRY: registry.gitlab.com/web6464113
  PORTFOLIO_V1_REPO_NAME: "portfolio_v1"
  ENV_DEPLOYMENT: "dev"
  PORTFOLIO_V1_IMAGE_NAME: "portfolio_v1-app-builder"
  PORTFOLIO_V1_TAG: "latest"
  BUILD_IMAGE: "${PORTFOLIO_V1_GROUP_REGISTRY}/${PORTFOLIO_V1_REPO_NAME}/${ENV_DEPLOYMENT}/${PORTFOLIO_V1_IMAGE_NAME}:${PORTFOLIO_V1_TAG}"
  NODE_VERSION: "18"
  SHARED_ENV_FILE: deploy_inputs.env
  VARIABLES_MANAGMENT_PROJECT_ID: "68617213" # Remplacez <project_id> par l'ID de votre projet GitLab



stages:
  - debug
  - test
  - build
  - deploy

debug:
  stage: debug
  script:
    - |
      source ./docker/.env
      echo "LOCAL_WEBAPP_DIR: $LOCAL_WEBAPP_DIR"
      echo "BUILD_IMAGE: $BUILD_IMAGE"
      echo "NODE_VERSION: $NODE_VERSION"
      echo "User: $CI_REGISTRY_USER"
      echo "Registry: $CI_REGISTRY"
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /(\[debug:true\])/'
      when: always
    - when: never

  
test:
  stage: test
  image: node:${NODE_VERSION}
  only:
    - merge_requests
    - branches
    - tags
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - app/node_modules/
  script:
    - cd app
    - node -v
    - npm ci
    #- npm run lint
    #- npm run test
    - npm run build

.before_docker_login: &before_docker_login
  before_script:
    - export COMPOSE_BAKE=true
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  <<: *before_docker_login
  script:
    - echo "Build image"
    - docker compose -f docker/docker-compose.yml build --pull
    - echo "Run containers for standalone"
    - docker compose -f standalone/docker-compose.yml up -d
    #- immplement /healthz
    - docker compose -f standalone/docker-compose.yml down

    - echo "=== Variables debug ==="
    - echo "CI_PIPELINE_SOURCE  = $CI_PIPELINE_SOURCE"
    - echo "CI_COMMIT_BRANCH    = $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_MESSAGE   = <$CI_COMMIT_MESSAGE>"

    - |
      echo "=== Choix de la condition d'envoi d'image ==="
      if [[ "$CI_COMMIT_MESSAGE" == *"\[build:image\]"* ]] && [[ "$CI_COMMIT_BRANCH" != "main" ]]; then
        echo "Condition 1: [build:image] détecté et branch != main"
        echo "→ On pousse directement l'image: ${BUILD_IMAGE}"
        docker push "${BUILD_IMAGE}"
      elif [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        echo "Condition 2: branch == main"
        echo "-> On retag l'image avant de la pousser"
        ENV_DEPLOYMENT="prd"
        PORTFOLIO_V1_TAG="${CI_COMMIT_SHORT_SHA}"
        TARGET_IMAGE="${PORTFOLIO_V1_GROUP_REGISTRY}/${PORTFOLIO_V1_REPO_NAME}/${ENV_DEPLOYMENT}/${PORTFOLIO_V1_IMAGE_NAME}:${PORTFOLIO_V1_TAG}"

        echo "Retagging ${BUILD_IMAGE} vers ${TARGET_IMAGE}"
        docker tag "${BUILD_IMAGE}" "${TARGET_IMAGE}"
        echo "Push de ${TARGET_IMAGE}"
        docker push "${TARGET_IMAGE}"

      else
        echo "Condition 3: Aucune condition remplie"
        echo "Skipping image push : pas de [build:image], pas de main, pas de tag."
      fi
      echo "==== Fin du push d'image ===="

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_MESSAGE =~ /(\[build:image\])/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "tag"'
      when: never

build-tag:
  stage: build
  image: docker:latest
  only:
    - tags
  services:
    - docker:dind
  <<: *before_docker_login
  script:
    - |
      echo "-> On retag l'image avant de la pousser"
      ENV_DEPLOYMENT="prd"
      PORTFOLIO_V1_TAG="${CI_COMMIT_TAG}"
      COMMIT_SHA_MAIN=$(git ls-remote --heads origin main | awk '{print substr($1, 1, 8)}')
      echo "COMMIT_SHA_MAIN: ${COMMIT_SHA_MAIN}"

      LAST_IMAGE_MAIN="${PORTFOLIO_V1_GROUP_REGISTRY}/${PORTFOLIO_V1_REPO_NAME}/${ENV_DEPLOYMENT}/${PORTFOLIO_V1_IMAGE_NAME}:${COMMIT_SHA_MAIN}"
      TARGET_IMAGE="${PORTFOLIO_V1_GROUP_REGISTRY}/${PORTFOLIO_V1_REPO_NAME}/${ENV_DEPLOYMENT}/${PORTFOLIO_V1_IMAGE_NAME}:${PORTFOLIO_V1_TAG}"

      echo "Retagging ${LAST_IMAGE_MAIN} vers ${TARGET_IMAGE}"
      docker pull "${LAST_IMAGE_MAIN}"
      docker tag "${LAST_IMAGE_MAIN}" "${TARGET_IMAGE}"
      echo "Push de ${TARGET_IMAGE}"
      docker push "${TARGET_IMAGE}"

    - echo "REGISTRY_IMAGE=${TARGET_IMAGE}" > $SHARED_ENV_FILE
    - echo "PROJECT_NAME=${PORTFOLIO_V1_REPO_NAME}" >> $SHARED_ENV_FILE
    - echo "ENV_DEPLOYMENT=${ENV_DEPLOYMENT}" >> $SHARED_ENV_FILE
    - cat $SHARED_ENV_FILE
  artifacts:
    reports:
      dotenv: $SHARED_ENV_FILE




# Job DEPLOY
update-variable-managment-manual:
  stage: deploy
  variables:
    REGISTRY_IMAGE:
      value: ""
    PROJECT_NAME:
      value: ""
    ENV_DEPLOYMENT:
      value: ""
  rules:
    - when: manual
      allow_failure: false
      
  inherit:
    variables: false
  trigger:
    project: "web6464113/portfolio_v1-variable-managment"
    branch: "main"


